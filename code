from abc import ABC, abstractmethod

class Person(ABC):
    def __init__(self, name, age):
        self.name = name
        self.age = age

    @abstractmethod
    def display_info(self):
        pass

class Doctor(Person):
    def __init__(self, name, age, specialization):
        super().__init__(name, age)
        self.specialization = specialization

    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Specialization: {self.specialization}")

class Nurse(Person):
    def __init__(self, name, age, department):
        super().__init__(name, age)
        self.department = department

    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Department: {self.department}")

class Patient(Person):
    def __init__(self, name, age, problem, assigned_doctor, assigned_nurse):
        super().__init__(name, age)
        self.problem = problem
        self.assigned_doctor = assigned_doctor
        self.assigned_nurse = assigned_nurse

    def display_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Problem: {self.problem}, Assigned Doctor: {self.assigned_doctor.name}, Assigned Nurse: {self.assigned_nurse.name}")

class Hospital:
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.doctors = []
            cls._instance.nurses = []
            cls._instance.patients = []
        return cls._instance

    def add_doctor(self, doctor):
        self.doctors.append(doctor)

    def add_nurse(self, nurse):
        self.nurses.append(nurse)

    def add_patient(self, patient):
        self.patients.append(patient)

    def display_staff(self):
        print("Doctors:")
        for doctor in self.doctors:
            doctor.display_info()
        print("\nNurses:")
        for nurse in self.nurses:
            nurse.display_info()

    def display_patients(self):
        print("\nPatients:")
        for patient in self.patients:
            patient.display_info()

class StaffFactory(ABC):
    @abstractmethod
    def create_person(self, name, age):
        pass

class DoctorFactory(StaffFactory):
    def create_person(self, name, age, specialization):
        return Doctor(name, age, specialization)

class NurseFactory(StaffFactory):
    def create_person(self, name, age, department):
        return Nurse(name, age, department)

class PatientFactory(StaffFactory):
    def create_person(self, name, age, problem, assigned_doctor, assigned_nurse):
        return Patient(name, age, problem, assigned_doctor, assigned_nurse)

doctor_factory = DoctorFactory()
nurse_factory = NurseFactory()
patient_factory = PatientFactory()

doctor1 = doctor_factory.create_person("Dr. House", 35, "Cardiology")
doctor2 = doctor_factory.create_person("Dr. Murphy", 40, "Orthopedics")

nurse1 = nurse_factory.create_person("Nurse Emily", 28, "ICU")
nurse2 = nurse_factory.create_person("Nurse Lilith", 30, "Pediatrics")

patient1 = patient_factory.create_person("John", 45, "Fever", doctor1, nurse1)
patient2 = patient_factory.create_person("Bob", 30, "Broken leg", doctor2, nurse2)

hospital = Hospital()
hospital.add_doctor(doctor1)
hospital.add_doctor(doctor2)
hospital.add_nurse(nurse1)
hospital.add_nurse(nurse2)
hospital.add_patient(patient1)
hospital.add_patient(patient2)

hospital.display_staff()
hospital.display_patients()
